# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


import { useState } from "react";
import './Home.css';

export function Home({}) {
  const handleLogout = () => {
    // Lógica para cerrar sesión
  };

  return (
    <div>
      <h1 class="Titulo">Welcome</h1>
      <button onClick={handleLogout}>Logout</button>
      <ProductViewer />
    </div>
  );
}

const ProductViewer = () => {
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [searchProductId, setSearchProductId] = useState('');
  const [filteredProducts, setFilteredProducts] = useState([]);

  // Lista de productos
  const products = [
    { id: 1, name: 'Producto A', price: 10.99, quantity: 20 },
    { id: 2, name: 'Producto B', price: 15.99, quantity: 15 },
  ];


  const handleSearchProduct = () => {
    const productId = parseInt(searchProductId, 10);
    if (!isNaN(productId)) {
      const product = products.find((p) => p.id === productId);
      if (product) {
        setSelectedProduct(product);
      } else {
        setSelectedProduct(null);
        alert('Producto no encontrado');
      }
    } else {
      setSelectedProduct(null);
      alert('Ingresa un ID válido');
    }
  };

  return (
    <div>
      <h2>Lista de Productos</h2>

      {/* Búsqueda por ID */}
      <div class="Frame01">
        <label>
          Buscar por ID:
          <input
            type="number"
            value={searchProductId}
            onChange={(e) => setSearchProductId(e.target.value)}
          />
        </label>
        <button onClick={handleSearchProduct}>Buscar</button>

      </div>

    


      {/* Detalles del Producto */}
      <div class="Frame02">
        <h3 className="Titutu">Detalles del Producto</h3>

      {/* Tabla para mostrar detalles del producto */}
      <table className="Frame07">
        <thead>
          <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Precio</th>
            <th>Cantidad Disponible</th>
          </tr>
        </thead>
        <tbody>
          {filteredProducts.map((product) => (
            <tr key={product.id}>
              <td>{product.id}</td>
              <td>{product.name}</td>
              <td>${product.price.toFixed(2)}</td>
              <td>{product.quantity}</td>
            </tr>
          ))}
        </tbody>
      </table>
      </div>

